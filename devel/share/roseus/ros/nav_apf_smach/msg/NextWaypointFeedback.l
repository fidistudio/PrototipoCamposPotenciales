;; Auto-generated. Do not edit!


(when (boundp 'nav_apf_smach::NextWaypointFeedback)
  (if (not (find-package "NAV_APF_SMACH"))
    (make-package "NAV_APF_SMACH"))
  (shadow 'NextWaypointFeedback (find-package "NAV_APF_SMACH")))
(unless (find-package "NAV_APF_SMACH::NEXTWAYPOINTFEEDBACK")
  (make-package "NAV_APF_SMACH::NEXTWAYPOINTFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude NextWaypointFeedback.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass nav_apf_smach::NextWaypointFeedback
  :super ros::object
  :slots (_remaining_distance _f_attr _f_rep ))

(defmethod nav_apf_smach::NextWaypointFeedback
  (:init
   (&key
    ((:remaining_distance __remaining_distance) 0.0)
    ((:f_attr __f_attr) (instance geometry_msgs::Vector3 :init))
    ((:f_rep __f_rep) (instance geometry_msgs::Vector3 :init))
    )
   (send-super :init)
   (setq _remaining_distance (float __remaining_distance))
   (setq _f_attr __f_attr)
   (setq _f_rep __f_rep)
   self)
  (:remaining_distance
   (&optional __remaining_distance)
   (if __remaining_distance (setq _remaining_distance __remaining_distance)) _remaining_distance)
  (:f_attr
   (&rest __f_attr)
   (if (keywordp (car __f_attr))
       (send* _f_attr __f_attr)
     (progn
       (if __f_attr (setq _f_attr (car __f_attr)))
       _f_attr)))
  (:f_rep
   (&rest __f_rep)
   (if (keywordp (car __f_rep))
       (send* _f_rep __f_rep)
     (progn
       (if __f_rep (setq _f_rep (car __f_rep)))
       _f_rep)))
  (:serialization-length
   ()
   (+
    ;; float32 _remaining_distance
    4
    ;; geometry_msgs/Vector3 _f_attr
    (send _f_attr :serialization-length)
    ;; geometry_msgs/Vector3 _f_rep
    (send _f_rep :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32 _remaining_distance
       (sys::poke _remaining_distance (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; geometry_msgs/Vector3 _f_attr
       (send _f_attr :serialize s)
     ;; geometry_msgs/Vector3 _f_rep
       (send _f_rep :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32 _remaining_distance
     (setq _remaining_distance (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; geometry_msgs/Vector3 _f_attr
     (send _f_attr :deserialize buf ptr-) (incf ptr- (send _f_attr :serialization-length))
   ;; geometry_msgs/Vector3 _f_rep
     (send _f_rep :deserialize buf ptr-) (incf ptr- (send _f_rep :serialization-length))
   ;;
   self)
  )

(setf (get nav_apf_smach::NextWaypointFeedback :md5sum-) "dcd1e3b5dd195b624d4a73fdb62300cf")
(setf (get nav_apf_smach::NextWaypointFeedback :datatype-) "nav_apf_smach/NextWaypointFeedback")
(setf (get nav_apf_smach::NextWaypointFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback: depuraci√≥n (distancia y fuerzas)
float32 remaining_distance
geometry_msgs/Vector3 f_attr
geometry_msgs/Vector3 f_rep


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :nav_apf_smach/NextWaypointFeedback "dcd1e3b5dd195b624d4a73fdb62300cf")


