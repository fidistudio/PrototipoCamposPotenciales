// Auto-generated. Do not edit!

// (in-package nav_apf_smach.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class NextWaypointFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.remaining_distance = null;
      this.f_attr = null;
      this.f_rep = null;
    }
    else {
      if (initObj.hasOwnProperty('remaining_distance')) {
        this.remaining_distance = initObj.remaining_distance
      }
      else {
        this.remaining_distance = 0.0;
      }
      if (initObj.hasOwnProperty('f_attr')) {
        this.f_attr = initObj.f_attr
      }
      else {
        this.f_attr = new geometry_msgs.msg.Vector3();
      }
      if (initObj.hasOwnProperty('f_rep')) {
        this.f_rep = initObj.f_rep
      }
      else {
        this.f_rep = new geometry_msgs.msg.Vector3();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type NextWaypointFeedback
    // Serialize message field [remaining_distance]
    bufferOffset = _serializer.float32(obj.remaining_distance, buffer, bufferOffset);
    // Serialize message field [f_attr]
    bufferOffset = geometry_msgs.msg.Vector3.serialize(obj.f_attr, buffer, bufferOffset);
    // Serialize message field [f_rep]
    bufferOffset = geometry_msgs.msg.Vector3.serialize(obj.f_rep, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type NextWaypointFeedback
    let len;
    let data = new NextWaypointFeedback(null);
    // Deserialize message field [remaining_distance]
    data.remaining_distance = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [f_attr]
    data.f_attr = geometry_msgs.msg.Vector3.deserialize(buffer, bufferOffset);
    // Deserialize message field [f_rep]
    data.f_rep = geometry_msgs.msg.Vector3.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 52;
  }

  static datatype() {
    // Returns string type for a message object
    return 'nav_apf_smach/NextWaypointFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'dcd1e3b5dd195b624d4a73fdb62300cf';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback: depuraci√≥n (distancia y fuerzas)
    float32 remaining_distance
    geometry_msgs/Vector3 f_attr
    geometry_msgs/Vector3 f_rep
    
    
    ================================================================================
    MSG: geometry_msgs/Vector3
    # This represents a vector in free space. 
    # It is only meant to represent a direction. Therefore, it does not
    # make sense to apply a translation to it (e.g., when applying a 
    # generic rigid transformation to a Vector3, tf2 will only apply the
    # rotation). If you want your data to be translatable too, use the
    # geometry_msgs/Point message instead.
    
    float64 x
    float64 y
    float64 z
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new NextWaypointFeedback(null);
    if (msg.remaining_distance !== undefined) {
      resolved.remaining_distance = msg.remaining_distance;
    }
    else {
      resolved.remaining_distance = 0.0
    }

    if (msg.f_attr !== undefined) {
      resolved.f_attr = geometry_msgs.msg.Vector3.Resolve(msg.f_attr)
    }
    else {
      resolved.f_attr = new geometry_msgs.msg.Vector3()
    }

    if (msg.f_rep !== undefined) {
      resolved.f_rep = geometry_msgs.msg.Vector3.Resolve(msg.f_rep)
    }
    else {
      resolved.f_rep = new geometry_msgs.msg.Vector3()
    }

    return resolved;
    }
};

module.exports = NextWaypointFeedback;
