// Generated by gencpp from file nav_apf_smach/NextWaypointFeedback.msg
// DO NOT EDIT!


#ifndef NAV_APF_SMACH_MESSAGE_NEXTWAYPOINTFEEDBACK_H
#define NAV_APF_SMACH_MESSAGE_NEXTWAYPOINTFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace nav_apf_smach
{
template <class ContainerAllocator>
struct NextWaypointFeedback_
{
  typedef NextWaypointFeedback_<ContainerAllocator> Type;

  NextWaypointFeedback_()
    : remaining_distance(0.0)
    , f_attr()
    , f_rep()
    , debug_info()  {
    }
  NextWaypointFeedback_(const ContainerAllocator& _alloc)
    : remaining_distance(0.0)
    , f_attr(_alloc)
    , f_rep(_alloc)
    , debug_info(_alloc)  {
  (void)_alloc;
    }



   typedef float _remaining_distance_type;
  _remaining_distance_type remaining_distance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _f_attr_type;
  _f_attr_type f_attr;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _f_rep_type;
  _f_rep_type f_rep;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _debug_info_type;
  _debug_info_type debug_info;





  typedef boost::shared_ptr< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct NextWaypointFeedback_

typedef ::nav_apf_smach::NextWaypointFeedback_<std::allocator<void> > NextWaypointFeedback;

typedef boost::shared_ptr< ::nav_apf_smach::NextWaypointFeedback > NextWaypointFeedbackPtr;
typedef boost::shared_ptr< ::nav_apf_smach::NextWaypointFeedback const> NextWaypointFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator1> & lhs, const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.remaining_distance == rhs.remaining_distance &&
    lhs.f_attr == rhs.f_attr &&
    lhs.f_rep == rhs.f_rep &&
    lhs.debug_info == rhs.debug_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator1> & lhs, const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_apf_smach

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd16aa403c54fc87081bcc540938af87";
  }

  static const char* value(const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd16aa403c54fc87ULL;
  static const uint64_t static_value2 = 0x081bcc540938af87ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_apf_smach/NextWaypointFeedback";
  }

  static const char* value(const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"float32 remaining_distance\n"
"geometry_msgs/Vector3 f_attr\n"
"geometry_msgs/Vector3 f_rep\n"
"string debug_info\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remaining_distance);
      stream.next(m.f_attr);
      stream.next(m.f_rep);
      stream.next(m.debug_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NextWaypointFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_apf_smach::NextWaypointFeedback_<ContainerAllocator>& v)
  {
    s << indent << "remaining_distance: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_distance);
    s << indent << "f_attr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.f_attr);
    s << indent << "f_rep: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.f_rep);
    s << indent << "debug_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.debug_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_APF_SMACH_MESSAGE_NEXTWAYPOINTFEEDBACK_H
