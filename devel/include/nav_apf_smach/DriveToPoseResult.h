// Generated by gencpp from file nav_apf_smach/DriveToPoseResult.msg
// DO NOT EDIT!


#ifndef NAV_APF_SMACH_MESSAGE_DRIVETOPOSERESULT_H
#define NAV_APF_SMACH_MESSAGE_DRIVETOPOSERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav_apf_smach
{
template <class ContainerAllocator>
struct DriveToPoseResult_
{
  typedef DriveToPoseResult_<ContainerAllocator> Type;

  DriveToPoseResult_()
    : arrived(false)  {
    }
  DriveToPoseResult_(const ContainerAllocator& _alloc)
    : arrived(false)  {
  (void)_alloc;
    }



   typedef uint8_t _arrived_type;
  _arrived_type arrived;





  typedef boost::shared_ptr< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> const> ConstPtr;

}; // struct DriveToPoseResult_

typedef ::nav_apf_smach::DriveToPoseResult_<std::allocator<void> > DriveToPoseResult;

typedef boost::shared_ptr< ::nav_apf_smach::DriveToPoseResult > DriveToPoseResultPtr;
typedef boost::shared_ptr< ::nav_apf_smach::DriveToPoseResult const> DriveToPoseResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator1> & lhs, const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator2> & rhs)
{
  return lhs.arrived == rhs.arrived;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator1> & lhs, const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_apf_smach

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea115e3ceb83b7b5fbcc7f283be1718c";
  }

  static const char* value(const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea115e3ceb83b7b5ULL;
  static const uint64_t static_value2 = 0xfbcc7f283be1718cULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_apf_smach/DriveToPoseResult";
  }

  static const char* value(const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"bool arrived\n"
;
  }

  static const char* value(const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arrived);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveToPoseResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_apf_smach::DriveToPoseResult_<ContainerAllocator>& v)
  {
    s << indent << "arrived: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arrived);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_APF_SMACH_MESSAGE_DRIVETOPOSERESULT_H
